    <%-include('../layouts/header.ejs')%>
<%-include('../layouts/navbar.ejs')%>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10"></link>
<style>
    /* Custom style to set text color to black */
    #newaddress-modal input {
        color: black;
    }

    /* Button customization */
    .custom-small-button {
    font-size: 12px; /* Adjust the font size as needed */
    padding: 5px 10px; /* Adjust the padding as needed */
}
</style>


<main class="main">
    <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Checkout</h1>
        </div><!-- End .container -->
    </div><!-- End .page-header -->

    <div class="page-content">
        <div class="checkout">
            <div class="container">
                <div class="cart_discount mb-4 col-lg-5 p-3 bg-light rounded">
                    <h6 class="text-uppercase mb-3 text-primary">Discount codes</h6>
                    <form class="position-relative">
                        <div class="input-group">
                            <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code" aria-label="Enter coupon code" aria-describedby="couponButtons">
                            <div class="input-group-append" id="couponButtons">
                                <button type="button" onclick="applyCode(event)" class="btn btn-primary mb-2 ml-4" id="applyCouponBtn">Apply</button>
                                <button type="button" onclick="removeCoupon()" class="btn btn-danger d-none mb-2 ml-4" id="removeCouponBtn">Remove Coupon</button>
                            </div>
                        </div>
                    </form>
                </div>
                <form action="/placeorder" method="POST">
                    <div class="row">
                        
                        <div class="col-lg-9">
                            <br>
                            <div class="container-fluid" style="display: flex; justify-content: space-between;">
                                <h5>Select Address</h5>
                                <button type="button" class="btn btn-success custom-small-button" data-toggle="modal" data-target="#newaddress-modal">
                                    Add New Address
                                </button>
                            </div>

                            <div class="container-fluid">
                                <% if (userAddresses && userAddresses.length > 0) { %>
                                    <% userAddresses.forEach((address, index) => { %>
                                        <div class="address-card" style="width: 80rem;">
                                            <div class="card-body" style="display: flex; align-items: center;">
                                                <ul class="selection-list" style="margin-right: 1rem;">
                                                    <li class="<%= index === 0 ? 'selected' : '' %>">
                                                        <input type="radio" id="addressSelection<%= index %>" name="addressSelection" data-address-id="<%= address._id %>" <%= index === 0 ? 'checked' : '' %>>
                                                    </li>
                                                </ul>
                                                <div>
                                                    <h5 class="card-title"><%= address.name %></h5>
                                                    <p class="card-text"><%= address.housename %></p>
                                                    <p class="card-text"><%= address.street %>, <%= address.city %></p>
                                                    <p class="card-text">Zip Code: <%= address.pin %></p>
                                                    <p class="card-text">Mobile: <%= address.mobile %></p>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p>No addresses found. Please add a new address.</p>
                                <% } %>
                            </div>
                            
                            <input type="hidden" name="selectedAddress" id="selectedAddress" value="<%= userAddresses.length > 0 ? userAddresses[0]._id : '' %>">
                            <input type="hidden" name="paymentMode" id="paymentMode" value="COD">
                            
                        </div><!-- End .col-lg-9 -->
                        <aside class="col-lg-3">
                            <div class="summary">
                                <h3 class="summary-title">Your Order</h3><!-- End .summary-title -->
                        
                                <table class="table table-summary">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                        
                                    <tbody>
                                        <% if (checkoutProduct && checkoutProduct.length > 0) { %>
                                            <% checkoutProduct.forEach(product => { %>
                                                <tr>
                                                    <td><a href="#"><%= product.productid.name %></a></td>
                                                    <td>₹<%= product.totalPrice %></td> <!-- Display total price -->
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="2">No products in the checkout.</td>
                                            </tr>
                                        <% } %>  
                                    
                                        <tr>
                                            <td>Shipping:</td>
                                            <td>Free shipping</td>
                                        </tr>
                                        <tr>
                                            <td>Subtotal:</td>
                                            <td>₹<%= subTotal %></td> <!-- Display subtotal -->
                                        </tr>
                                        <tr>
                                            <td>Discount:</td>
                                            <td>-₹<%= discount %></td> <!-- Display discount -->
                                        </tr>
                                        <tr>
                                            <td>Grand Total:</td>
                                            <td>₹<%= grandTotal %></td> <!-- Display grand total -->
                                        </tr>
                                    </tbody>
                                </table><!-- End .table table-summary -->
                        
                                <ul class="selection-list">
                                    <li>
                                        <input type="radio" id="wallet" name="paymentMethod" value="wallet">
                                        <label for="wallet"> Wallet</label>
                                    </li>
                                    <li>
                                        <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                                        <label for="razorpay"> Razor Pay</label>
                                    </li>
                                    <li>
                                        <input type="radio" id="cod" name="paymentMethod" value="cod">
                                        <label for="cod"> Cash on Delivery</label>
                                    </li>
                                </ul>
                                
                                <!-- Warning message div -->
                                <div id="warningMessage" style="display: none;"></div>
                        
                                <!-- Button to trigger checkout -->
                                <button type="submit" class="btn btn-outline-primary-2 btn-order btn-block" >
                                    <span class="btn-text">Place Order</span>
                                    <span class="btn-hover-text">Proceed to Checkout</span>
                                </button>
                            </div><!-- End .summary -->
                        </aside><!-- End .col-lg-3 -->
                        
                    </div><!-- End .row -->
                </form>
            </div><!-- End .container -->
        </div><!-- End .checkout -->
    </div><!-- End .page-content -->
</main><!-- End .main -->

<!-- Add your modal HTML with an error message area -->

<div class="modal fade" id="newaddress-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add New Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="container-fluid form-group">
                        <label for="inputName">Name</label>
                        <input type="text" class="form-control" id="addressName" placeholder="Enter your name">
                        <div id="validationMessagesName" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="container-fluid form-group">
                        <label for="inputName">House Name</label>
                        <input type="text" class="form-control" id="houseName" placeholder="Enter your house name">
                        <div id="validationMessagesHouse" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="container-fluid form-group">
                        <label for="inputName">Street</label>
                        <input type="text" class="form-control" id="street" placeholder="Enter your street name">
                        <div id="validationMessagesStreet" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="container-fluid form-group">
                        <label for="inputName">City</label>
                        <input type="text" class="form-control" id="city" placeholder="Enter your city name">
                        <div id="validationMessagesCity" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="container-fluid form-group">
                        <label for="inputName">Pincode</label>
                        <input type="text" class="form-control" id="pincode" placeholder="Enter your pincode">
                        <div id="validationMessagesPincode" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="container-fluid form-group">
                        <label for="inputName">Mobile</label>
                        <input type="text" class="form-control" id="mobile" placeholder="Enter your mobile number">
                        <div id="validationMessagesMobile" class="text-danger" style="display: none;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" id="saveAddressBtn" class="btn btn-primary">Save Address</button>
                    </div>
                </form>
            </div>
            <!-- <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" id="saveAddressBtn" class="btn btn-primary">Save Address</button>
            </div> -->
            
        </div>
    </div>
</div>

<!-- Add your script -->

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<!-- Include the SweetAlert2 CSS file for styling -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">

<!-- Include the SweetAlert2 JavaScript file for functionality -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>

<!-- Apply Coupon -->
<script>

    // applying couponCode
    function applyCode() {
    event.preventDefault();
    const couponCode = $('#couponCode').val();
    console.log(couponCode);
    $.ajax({
        url: '/applycouponcode',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ couponCode: couponCode }),
        success: function (response) {
            if (response.used) {
                Swalfire(response.message);
            } else if (response.success) {
                // Update the total price element with the new total price
                $('#updatedTotalPrice').text(`Total: ₹${response.totalPrice}`).show();
                SuccessSwal(response.message);
            } else if (response.limit) {
                Swalfire(response.message);
            } else if (response.expired) {
                Swalfire(response.message);
            } else if(response.CodeErr){
                Swalfire(response.message);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
        // Handle errors
        console.error('Error:', errorThrown);
        // You can also display an error message to the user if needed
        }
    });
    }

    function Swalfire(text) {
    Swal.fire({
        position: 'center',
        icon: 'error',
        title: `${text}`,
        showConfirmButton: false,
        timer: 1700,
    })
    }

    function SuccessSwal(text){
    Swal.fire({
        position: 'center',
        icon: 'success',
        title: `${text}`,
        showConfirmButton: false,
        timer: 1700,
    })
    }

    // Show the "Remove Coupon" button
    document.getElementById("removeCouponBtn").classList.remove("d-none");

    // Hide the "Apply Coupon" button
    document.getElementById("applyCouponBtn").classList.add("d-none");


    function removeCoupon() {
    // Assuming you have logic here to remove the applied coupon

    // Hide the "Remove Coupon" button
    document.getElementById("removeCouponBtn").classList.add("d-none");

    // Show the "Apply Coupon" button
    document.getElementById("applyCouponBtn").classList.remove("d-none");
}
</script>



<!-- Payment tab -->
<script>
    let grandTotal = '<%= grandTotal %>';
    console.log("grandTotal: ", grandTotal);
    document.querySelector("button[type='submit']").addEventListener("click", async function(event) {
        console.log("Submit button clicked");
        event.preventDefault(); // Prevent the default behavior of form submission

        // Check if any payment method is selected
        let radioButton = document.querySelector('input[name="paymentMethod"]:checked');
        console.log(radioButton);
        if (radioButton) {
            let paymentMethod = radioButton.value;
            console.log("Selected payment method:", paymentMethod);

            // Proceed with the selected payment method
            if (paymentMethod === "razorpay") {
                // Razorpay checkout logic
                console.log("Razorpay selected");

                // Replace with your actual Razorpay options
                var options = {
                    "key": "rzp_test_OsHOhbbPFG3LF6",
                    "amount": grandTotal * 100, // Amount in paise
                    "currency": "INR",
                    "name": "FurnIt",
                    "description": "Test Transaction",
                    "image": "assets/images/logo.png",
                    "handler": function(response) {
                        // Make a fetch request to the /placeOrder endpoint after successful payment
                        fetch("/placeorder", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                selectedAddress: document.getElementById("selectedAddress").value,
                                paymentMethod: paymentMethod,
                                paymentId: response.razorpay_payment_id // Include the Razorpay payment ID in the request body
                            })
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error("Failed to place order");
                            }
                            // Extract the response data 
                            return response.json();
                        })
                        .then(responseData => {
                            if (responseData.success) {
                                console.log("Inside .then responseData");
                                let hashedOrderId = responseData.hashedOrderId;
                                console.log("hashedOrderId: ", hashedOrderId);
                                // Redirect to the order confirmation page with the hashed order ID
                                window.location.href = `/orderconfirmation/${hashedOrderId}`;
                            } else {
                                // Show an error warning message
                                document.getElementById("warningMessage").textContent = "Failed to place order. Please try again.";
                                document.getElementById("warningMessage").style.color = "red"; // Set color to red
                                document.getElementById("warningMessage").style.display = "block";
                            }
                        })
                        .catch(error => {
                            console.error("Error placing order:", error);
                            // Show an error warning message
                            document.getElementById("warningMessage").textContent = "Failed to place order. Please try again.";
                            document.getElementById("warningMessage").style.color = "red"; // Set color to red
                            document.getElementById("warningMessage").style.display = "block";
                        });
                    },
                    "prefill": {
                        "name": "Customer Name",
                        "email": "customer@example.com",
                        "contact": "9999999999"
                    },
                    "theme": {
                        "color": "#CC9966"
                    }
                };
                var rzp = new Razorpay(options);
                rzp.open();
            }

            else if (paymentMethod === "cod") {
                // Implement Cash on Delivery logic here
                console.log("Cash on Delivery selected");

                // Generate a unique payment ID (UUID)
                const paymentId = generatePaymentId();

                try {
                    // Make a single fetch request to the /placeOrder endpoint
                    const response = await fetch("/placeorder", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            selectedAddress: document.getElementById("selectedAddress").value,
                            paymentMethod: paymentMethod,
                            paymentId: paymentId
                        })
                    });

                    if (!response.ok) {
                        throw new Error("Failed to place order");
                    }

                    // Extract the response data 
                    const responseData = await response.json();
                    console.log("responseData: ", responseData);

                    if (responseData.success) {
                        let hashedOrderId = responseData.hashedOrderId
                        // Redirect to the order confirmation page with the hashed order ID
                        window.location.href = `/orderconfirmation/${hashedOrderId}`;
                    } else {
                        // Show an error warning message
                        document.getElementById("warningMessage").textContent = "Failed to place order. Please try again.";
                        document.getElementById("warningMessage").style.color = "red"; // Set color to red
                        document.getElementById("warningMessage").style.display = "block";
                    }
                } catch (error) {
                    console.error("Error placing order:", error);
                    // Show an error warning message
                    document.getElementById("warningMessage").textContent = "Failed to place order. Please try again.";
                    document.getElementById("warningMessage").style.color = "red"; // Set color to red
                    document.getElementById("warningMessage").style.display = "block";
                }
            } else if (paymentMethod === "wallet") {
                // Implement Wallet payment logic here
                console.log("Wallet selected");

                // Generate a unique payment ID (UUID)
                const paymentId = generatePaymentId();

                try {
                    // Make a single fetch request to the /placeOrder endpoint
                    const response = await fetch("/placeorder", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            selectedAddress: document.getElementById("selectedAddress").value,
                            paymentMethod: paymentMethod,
                            paymentId: paymentId // Include the generated payment ID
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error("Failed to place order");
                    }
                    // Redirect to the order confirmation page
                    window.location.href = `/orderconfirmation/${hashedOrderId}`;

                } catch (error) {
                    console.error("Error placing order:", error);
                    // Show an error warning message
                    document.getElementById("warningMessage").textContent = "Failed to place order. Please try again.";
                    document.getElementById("warningMessage").style.color = "red"; // Set color to red
                    document.getElementById("warningMessage").style.display = "block";
                }
            }
        } else {
            // Show a warning message if no payment method is selected
            document.getElementById("warningMessage").textContent = "Please select a payment method.";
            document.getElementById("warningMessage").style.color = "red"; // Set color to red
            document.getElementById("warningMessage").style.display = "block";
        }
    });
    // Function to generate a unique payment ID (UUID)
    function generatePaymentId() {

        // Generate a UUID (v4)
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
</script>

<script>
    $(document).ready(function () {
        // Add event listener to clear error message on input focus
        $('#addressName, #houseName, #street, #city, #pincode, #mobile').on('input', function () {
            var fieldId = '#validationMessages' + $(this).attr('id').charAt(0).toUpperCase() + $(this).attr('id').slice(1);
            $(fieldId).hide().empty();
        });

        // Event listener for address selection
        $('input[name="addressSelection"]').on('change', function () {
            $('#selectedAddress').val($(this).attr('data-address-id'));
        });

        $('#saveAddressBtn').click(function () {
            // Clear previous error messages
            $('.text-danger').empty().hide();

            // Validate each input field
            var addressName = $('#addressName').val().trim();
            var houseName = $('#houseName').val().trim();
            var street = $('#street').val().trim();
            var city = $('#city').val().trim();
            var pincode = $('#pincode').val().trim();
            var mobile = $('#mobile').val().trim();

            var isValid = true;

            if (addressName === '') {
                appendErrorMessage('#validationMessagesName', 'Please enter your name.');
                isValid = false;
            }

            if (houseName === '') {
                appendErrorMessage('#validationMessagesHouse', 'Please enter your house name.');
                isValid = false;
            }

            if (street === '') {
                appendErrorMessage('#validationMessagesStreet', 'Please enter your street name.');
                isValid = false;
            }

            if (city === '') {
                appendErrorMessage('#validationMessagesCity', 'Please enter your city name.');
                isValid = false;
            }

            // Validate pincode with exactly 6 digits
            if (!/^\d{6}$/.test(pincode)) {
                appendErrorMessage('#validationMessagesPincode', 'Please enter a valid 6-digit pincode.');
                isValid = false;
            }

            // Validate mobile with exactly 10 digits
            if (!/^\d{10}$/.test(mobile)) {
                appendErrorMessage('#validationMessagesMobile', 'Please enter a valid 10-digit mobile number.');
                isValid = false;
            }

            // If all validation passes, you can proceed to save the address
            if (isValid) {
                // Create an object with the address details
                var newAddress = {
                    name: addressName,
                    housename: houseName,
                    street: street,
                    city: city,
                    pin: parseInt(pincode),
                    mobile: parseInt(mobile)
                };

                // Now, you can save the address details to MongoDB
                saveAddressToDatabase(newAddress);

                // Close the modal
                $('#newaddress-modal').modal('hide');
            }
        });

        function appendErrorMessage(fieldId, message) {
            $(fieldId).html(message).show();
        }

        function saveAddressToDatabase(newAddress) {
            // Perform an AJAX request or use a backend route to save the address to MongoDB
            // Example using jQuery AJAX (replace with your actual backend route)
            $.ajax({
                type: 'POST',
                url: '/api/saveAddress', // Replace with your backend route
                contentType: 'application/json',
                data: JSON.stringify(newAddress),
                success: function (response) {
                    // Handle the success response
                    console.log('Address saved successfully:', response);

                    // Reload the page after successful save
                    location.reload();
                },
                error: function (error) {
                    // Handle the error response
                    console.error('Error saving address:', error);
                }
            });
        }
    });
</script>

<%-include('../layouts/footbar.ejs')%>
<%-include('../layouts/footer.ejs')%>